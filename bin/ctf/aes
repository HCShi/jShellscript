#!/usr/bin/python
# coding: utf-8

##################################################################
# argparse
##################################################################
import argparse
parser = argparse.ArgumentParser(
    prog="aes",
    formatter_class=argparse.RawDescriptionHelpFormatter,  # 没有这句话, 换行会过滤掉
    description='''\
        Usage Example:
        --------------------------------
        python -c 'print "a" * 32' | aes -e hellojrp                  # VKe7EeJ0bm8qgRKyWOvBqg==
        python -c 'print "a" * 32' | aes VKe7EeJ0bm8qgRKyWOvBqg==     # hellojrp, 输入参数默认是解密
        python -c 'print "a" * 32' | aes -d VKe7EeJ0bm8qgRKyWOvBqg==  # hellojrp
        python -c 'print "a" * 32' | aes VKe7EeJ0bm8qgRKyWOvBqg== -d  # hellojrp
        echo 'jrp' | aes -e hellojrp                  # mC6e1CTPR5ve3kG66EL9uw==, 会自动 zeropadding 到 32 位
        echo 'jrp' | aes mC6e1CTPR5ve3kG66EL9uw==     # hellojrp, echo '', 可以不写, 后面输入

        --------------------------------
        python -c 'print "a" * 32' 是 aes_key
        aes_key 默认是手动输入的, 明文必须作为参数传进去
        aes_key 不足 32字节 自动补全为 32 字节
        明文 text 不是 16字节 倍数的, 自动补全
        ''')
parser.add_argument('string', type=str, nargs='?', help='decode the string')
parser.add_argument('-d', action='store_true', help='decode the string [default]')
parser.add_argument('-e', action='store_true', help='encode the string')

parser.add_argument('--autho', action='store_const', const='14thCoder', help='show the autho')
parser.add_argument('--version', action='version', version='%(prog)s 1.0')
args = parser.parse_args()

##################################################################
# encode & decode
##################################################################
import base64
import random
import string
from Crypto.Cipher import AES
def aes_decode(cipher_text):
    key = raw_input()
    key = key + ('\0' * (32 - len(key)))  # 根据 AES 规范, 可以是 16 字节、24 字节和32 字节长, 分别对应 128 位、192 位和 256 位
    cipher = AES.new(key, AES.MODE_CBC, key[:16])  # 生成 AESCipher 对象, 解释见 jptpassword -l2
    return cipher.decrypt(cipher_text).rstrip('\0')
def aes_encode(text):
    text = text + ('\0' * (16 - (len(text) % 16)))  # 补全不够 16 位
    key = raw_input()
    key = key + ('\0' * (32 - len(key)))
    cipher = AES.new(key, AES.MODE_CBC, key[:16])  # 生成 AESCipher 对象, 解释见 jptpassword -l2
    return cipher.encrypt(text)  # 对数据进行加密
def base64_decode(text):
    return base64.b64decode(text)
def base64_encode(cipher_text):
    return base64.b64encode(cipher_text)

##################################################################
# main
##################################################################
import sys
if __name__ == "__main__":
    if args.autho:
        print args.autho
        exit(0)
    if len(sys.argv) == 2 and args.string:  # aes str 默认指定为 -d, 解密
        print aes_decode(base64_decode(args.string))
        exit(0)
    if args.e and args.string:
        print base64_encode(aes_encode(args.string))
        exit(0)
    if args.d and args.string:
        print aes_decode(base64_decode(args.string))
        exit(0)
