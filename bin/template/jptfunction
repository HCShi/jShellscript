#!/usr/bin/python
#coding: utf-8

##################################################################
# argparse
##################################################################
import argparse
parser = argparse.ArgumentParser(
    prog="jptfunction",
    formatter_class=argparse.RawDescriptionHelpFormatter,  # 没有这句话, 换行会过滤掉
    description='''\
        Usage Example:
        --------------------------------
        jptfunction
        jptfunction -l1
        jptfunction -l2
        # 以上格式经测试正确, 其它格式出错了我不背锅

        --------------------------------
        ''')
parser.add_argument('-l1', action='store_true', help='random string')
parser.add_argument('-l2', action='store_true', help='configparser')
parser.add_argument('-l3', action='store_true', help='sys os')
parser.add_argument('-l4', action='store_true', help='list tuple encode')
parser.add_argument('-l5', action='store_true', help='dict json')
parser.add_argument('-l6', action='store_true', help='prettytable termcolor')
parser.add_argument('-l7', action='store_true', help='doc toy_grammer')

parser.add_argument('--autho', action='store_const', const='14thCoder', help='show the autho')
parser.add_argument('--version', action='version', version='%(prog)s 1.0')
args = parser.parse_args()

##################################################################
# function
##################################################################
import os
user_path = os.path.expanduser('~')  # '/home/coder352'
from configparser import ConfigParser  # 读配置文件
cfg = ConfigParser()
cfg.read(user_path + '/github/jShellscript/bin/template/config.ini')
path = cfg.get('PATH', 'current_path')
separator = cfg.get('MISC', 'separator')
def l1():
    print separator + ' random string'
    f = open(path + '/src/jptfunction/l1_random_string.py')
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l2():
    print separator + ' configparser'
    f = open(path + './src/jptfunction/l2_configparser.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l3():
    print separator + ' sys os'
    f = open(path + './src/jptfunction/l3_sys_os.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l4():
    print separator + ' list tuple'
    f = open(path + './src/jptfunction/l4_list_tuple_pprint_encode.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l5():
    print separator + ' dict json'
    f = open(path + './src/jptfunction/l5_dict_json.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l6():
    print separator + ' prettytable termcolor'
    f = open(path + './src/jptfunction/l6_prettytable_termcolor.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print
def l7():
    print separator + ' doc toy_grammer'
    f = open(path + './src/jptfunction/l7_doc_toy_grammar.py'.lstrip('.'))
    for line in f.readlines()[2:]:  # 去掉开头两行相同的
        print ' ' * 4 + line,
    print

##################################################################
# main
##################################################################
import sys
if __name__ == "__main__":
    if args.autho:
        print args.autho

    if len(sys.argv) == 1:
        l1()
    if args.l1:
        l1()
    if args.l2:
        l2()
    if args.l3:
        l3()
    if args.l4:
        l4()
    if args.l5:
        l5()
    if args.l6:
        l6()
    if args.l7:
        l7()
