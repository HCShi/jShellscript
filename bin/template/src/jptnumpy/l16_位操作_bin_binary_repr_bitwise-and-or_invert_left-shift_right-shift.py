#!/usr/bin/python3
# coding: utf-8
# bitwise_and 对数组元素执行位与操作; bitwise_or 对数组元素执行位或操作; invert 计算位非
# left_shift 向左移动二进制表示的位; right_shift 向右移动二进制表示的位
import numpy as np
##################################################################
# bitwise_and; 对输入数组中的整数的二进制表示的相应位执行位与运算
a, b = 13, 17
print(bin(a), bin(b))  # 0b1101 0b10001; 13 和 17 的二进制形式
print(np.bitwise_and(13, 17))  # 1; 13 和 17 的位与
##################################################################
# bitwise_or; 对输入数组中的整数的二进制表示的相应位执行位或运算
a, b = 13, 17
print(bin(a), bin(b))  # 0b1101 0b10001; 13 和 17 的二进制形式
print(np.bitwise_or(13, 17))  # 29; 13 和 17 的位或
##################################################################
# invert; 此函数计算输入数组中整数的位非结果; 对于有符号整数, 返回补码
print(np.invert(np.array([13], dtype=np.uint8)))  # [242]; 13 的位反转, 其中 ndarray 的 dtype 是 uint8
# 比较 13 和 242 的二进制表示, 我们发现了位的反转
print(np.binary_repr(13, width=8))  # 00001101; 13 的二进制表示
print(np.binary_repr(242, width = 8))  # 11110010; 242 的二进制表示
# np.binary_repr() 函数返回给定宽度中十进制数的二进制表示
##################################################################
# left_shift; 将数组元素的二进制表示中的位向左移动到指定位置, 右侧附加相等数量的 0
print(np.left_shift(10, 2))  # 40; 将 10 左移两位
print(np.binary_repr(10, width=8))  # 00001010; 10 的二进制表示
print(np.binary_repr(40, width=8))  # 00101000; 40 的二进制表示; 00001010 中的两位移动到了左边, 并在右边添加了两个 0
##################################################################
# right_shift; 将数组元素的二进制表示中的位向右移动到指定位置, 左侧附加相等数量的 0
print(np.right_shift(40, 2))  # 10; 将 40 右移两位
print(np.binary_repr(40, width=8))  # 00101000; 40 的二进制表示
print(np.binary_repr(10, width=8))  # 00001010; 10 的二进制表示; '00001010' 中的两位移动到了右边, 并在左边添加了两个 0
