#!/usr/bin/python3
# coding: utf-8
# NumPy 提供标准的三角函数, 算术运算的函数, 复数处理函数等
import numpy as np
##################################################################
# 三角函数; NumPy 拥有标准的三角函数, 它为弧度制单位的给定角度返回三角函数比值
a = np.array([0, 30, 45, 60, 90])  # 通过乘 pi/180 转化为弧度
print(np.sin(a * np.pi / 180))  # [ 0.  0.5  0.70710678  0.8660254  1.]; 不同角度的正弦值
print(np.cos(a * np.pi / 180))  # [ 1.000e+00  8.66025404e-01  7.07106781e-01  5.00000000e-01 6.12323400e-17]
print(np.tan(a * np.pi / 180))  # [0.00e+00  5.77350269e-01  1.00000000e+00  1.73205081e+00  1.63312394e+16]
# arcsin, arccos 和 arctan 函数返回给定角度的 sin, cos 和 tan 的反三角函数
a = np.array([0, 30, 45, 60, 90])
sin = np.sin(a * np.pi / 180); print(sin)  # [ 0.          0.5         0.70710678  0.8660254   1.        ]
inv = np.arcsin(sin); print(inv)  # [ 0.  0.52359878  0.78539816  1.04719755  1.57079633]; 计算角度的反正弦, 返回弧度制
print(np.degrees(inv))  # [  0.  30.  45.  60.  90.]; 通过转化为角度制来检查结果
##################################################################
# atan2(y, x); 所表达的意思是坐标原点为起点, 指向(x, y)的射线在坐标平面上与x轴正方向之间的角的角度
print(np.degrees(np.math.atan2(1, 0)))  # 90, (0, 1) 和 x 轴夹角
##################################################################
# 舍入函数
# numpy.around(a, decimals=0); 这个函数返回四舍五入到所需精度的值
# a 输入数组; decimals 要舍入的小数位数, 默认值为0, 如果为负, 整数将四舍五入到小数点左侧的位置
a = np.array([1.0, 5.55, 123, 0.567, 25.532]); print(a)  # [1.  5.55  123.   0.567  25.532]
print(np.around(a))  # [   1.    6.   123.    1.   26. ]
print(np.around(a, decimals=1))  # [   1.    5.6  123.    0.6  25.5]
print(np.around(a, decimals=-1))  # [   0.    10.  120.    0.   30. ]
# numpy.floor(); 返回不大于输入参数的最大整数; 注意在 Python 中, 向下取整总是从 0 舍入
a = np.array([-1.7, 1.5, -0.2, 0.6, 10]); print(a)  # [ -1.7   1.5  -0.2   0.6  10. ]
print(np.floor(a))  # [ -2.   1.  -1.   0.  10.]
# numpy.ceil(); 返回输入值的上限, 标量 x 的上限是最小的整数 i, 使得 i >= x
a = np.array([-1.7, 1.5, -0.2, 0.6, 10]); print(a)  # [ -1.7   1.5  -0.2   0.6  10. ]
print(np.ceil(a))  # [ -1.   2.  -0.   1.  10.]
