#!/usr/bin/python3
# coding: utf-8
# NumPy 有很多有用的统计函数, 用于从数组中给定的元素中查找最小, 最大, 百分标准差和方差等
import numpy as np
##################################################################
# numpy.amin() 和 numpy.amax(); 这些函数从给定数组中的元素沿指定轴返回最小值和最大值
a = np.array([[3, 7, 5], [8, 4, 3], [2, 4, 9]]); print(a)  # [[3 7 5] [8 4 3] [2 4 9]]
print(np.amin(a, 1))  # [3 3 2]
print(np.amin(a, 0))  # [2 4 3]
print(np.amax(a))  # 9
print(np.amax(a, axis=0))  # [8 7 9]
##################################################################
# numpy.ptp(); 函数返回沿轴的值的范围 (最大值 - 最小值)
a = np.array([[3, 7, 5], [8, 4, 3], [2, 4, 9]]); print(a)  # [[3 7 5] [8 4 3] [2 4 9]]
print(np.ptp(a))  # 7; 调用 ptp() 函数
print(np.ptp(a, axis=1))  # [4 5 7]; 沿轴 1 调用 ptp() 函数
print(np.ptp(a, axis=0))  # [6 3 6]; 沿轴 0 调用 ptp() 函数：
##################################################################
# numpy.percentile(a, q, axis); 百分位数是统计中使用的度量, 表示小于这个值得观察值占某个百分比
# a 输入数组; q 要计算的百分位数, 在 0 ~ 100 之间; axis 沿着它计算百分位数的轴
a = np.array([[30, 40, 70], [80, 20, 10], [50, 90, 60]]); print(a)  # [[30 40 70] [80 20 10] [50 90 60]]
print(np.percentile(a, 50))  # 50.0
print(np.percentile(a, 50, axis=1))  # [ 40. 20. 60.]; 沿轴 1 调用 percentile() 函数
print(np.percentile(a, 50, axis=0))  # [ 50. 40. 60.]; 沿轴 0 调用 percentile() 函数
##################################################################
# numpy.median(); 中值定义为将数据样本的上半部分与下半部分分开的值
a = np.array([[30, 65, 70], [80, 95, 10], [50, 90, 60]]); print(a)  # [[30 65 70] [80 95 10] [50 90 60]]
print(np.median(a))  # 65.0
print(np.median(a, axis=0))  # [ 50. 90. 60.]; 沿轴 0 调用 median() 函数
print(np.median(a, axis=1))  # [ 65. 80. 60.]; 沿轴 1 调用 median() 函数
##################################################################
# numpy.mean(); 算术平均值是沿轴的元素的总和除以元素的数量, 返回数组中元素的算术平均值, 如果提供了轴, 则沿其计算
a = np.array([[1, 2, 3], [3, 4, 5], [4, 5, 6]]); print(a)  # [[1 2 3] [3 4 5] [4 5 6]]
print(np.mean(a))  # 3.66666666667
print(np.mean(a, axis=0))  # [ 2.66666667 3.66666667 4.66666667]; 沿轴 0 调用 mean() 函数
print(np.mean(a, axis=1))  # [ 2. 4. 5.]; 沿轴 1 调用 mean() 函数
##################################################################
# numpy.average() 加权平均值是由每个分量乘以反映其重要性的因子得到的平均值, 根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值
# 该函数可以接受一个轴参数, 如果没有指定轴, 则数组会被展开
# 考虑数组 [1, 2, 3, 4] 和相应的权重 [4, 3, 2, 1], 通过将相应元素的乘积相加, 并将和除以权重的和, 来计算加权平均值
# 加权平均值 = (1 * 4 + 2 * 3 + 3 * 2 + 4 * 1) / (4 + 3 + 2 + 1)
a = np.array([1, 2, 3, 4]); print(a)  # [1 2 3 4]
print(np.average(a))  # 2.5; 不指定权重时相当于 mean 函数
wts = np.array([4, 3, 2, 1])
print(np.average(a, weights=wts))  # 2.0; 如果 returned 参数设为 true, 则返回权重的和
print(np.average([1, 2, 3, 4], weights=[4, 3, 2, 1], returned=True))  # (2.0, 10.0); 权重的和
# 在多维数组中, 可以指定用于计算的轴
a = np.arange(6).reshape(3, 2); print(a)  # [[0 1] [2 3] [4 5]]
wt = np.array([3, 5])
print(np.average(a, axis=1, weights=wt))  # [ 0.625 2.625 4.625]
print(np.average(a, axis=1, weights=wt, returned=True))  # (array([ 0.625, 2.625, 4.625]), array([ 8., 8., 8.]))
##################################################################
# 标准差: 标准差是与均值的偏差的平方的平均值的平方根; std = sqrt(mean((x - x.mean()) ** 2))
# 数组[1, 2, 3, 4], 平均值为 2.5, 差的平方是 [2.25, 0.25, 0.25, 2.25], 平均值的平方根除以 4, 即 sqrt(5/4) 是 1.1180339887498949
print(np.std([1, 2, 3, 4]))  # 1.1180339887498949
##################################################################
# 方差: 方差是偏差的平方的平均值, 即 mean((x - x.mean())** 2)
print(np.var([1, 2, 3, 4]))  # 1.25
