#!/bin/bash

##################################################################
## /etc/bash.bashrc
##################################################################
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export PATH=/home/${USER}/github/shellscript/bin:$PATH
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=/usr/local/texlive/2016/bin/x86_64-linux:$PATH

##################################################################
## Tmux 每次登陆进入到tmux
##################################################################
# 方法一:
# 参考自: xuxiaodong/tmuxen
# 该脚本先判断一个名为 codefun 的 tmux 会话是否存在，如果不存在则创建它，否则就附加到此会话。接下来，在新建会话之后的动作包括：
# 创建窗口 1，并分为上下两个窗格，其中上窗格占 80% 空间，运行 Vim，下窗格占 20% 空间，运行 Pry
# 创建窗口 2，运行 Mutt
# 创建窗口 3，运行 Irssi
# 创建窗口 4，运行 Cmus
# 创建窗口 5，分左右两个窗格，各占 50% 空间，皆运行 Zsh
# cmd=$(which tmux) # tmux path
# session=codefun   # session name
#
# if [ -z $cmd ]; then
#   echo "You need to install tmux."
#   exit 1
# fi
#
# $cmd has -t $session
#
# if [ $? != 0 ]; then
#   $cmd new -d -n vim -s $session "vim"
#   $cmd splitw -v -p 20 -t $session "pry"
#   $cmd neww -n mutt -t $session "mutt"
#   $cmd neww -n irssi -t $session "irssi"
#   $cmd neww -n cmus -t $session "cmus"
#   $cmd neww -n zsh -t $session "zsh"
#   $cmd splitw -h -p 50 -t $session "zsh"
#   $cmd selectw -t $session:5
# fi
#
# $cmd att -t $session
#
# exit 0

# 方法二:
tmux_init(){
    tmux new-session -s "jrp" -d -n "local"  # 开启一个会话
    tmux new-window -n "other"               # 开启一个窗口
    tmux split-window -h                     # 开启一个竖屏
    # tmux split-window -v "top"               # 开启一个横屏,并执行top命令
    tmux -2 attach-session -d                # tmux -2强制启用256color，连接已开启的tmux
}

# 判断是否已有开启的tmux会话，没有则开启
if which tmux 2>&1 >/dev/null; then
    test -z "$TMUX" && (tmux attach || tmux_init)
fi

##################################################################
## django & virtualenv
##################################################################
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/workspace
# source /usr/local/bin/virtualenvwrapper.sh

##################################################################
## Go env
##################################################################
export GOPATH=$HOME/workspace
export PATH=$PATH:$GOPATH/bin

##################################################################
## ~/.zshrc see something in jpc/terminal_config
##################################################################
eval `dircolors ~/.dircolors` # 执行的是调用这个脚本的地方的文件，即 ~/.dircolors
# dircolors 是系统自带命令，dircolors文件是自定义的，只要加上这句话，就可以改变ls的颜色，不需要其它软件支持
export TERM=xterm-256color
DEFAULT_USER=`whoami`
export EDITOR=/usr/bin/vim

# 只显示当前工作目录 并不起作用, 对 agnoster
# if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# else
#     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
#     #PS1="\$(basename `pwd`)"
# fi
# unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#     #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]"
#     ;;
# *)
#     ;;
# esac
