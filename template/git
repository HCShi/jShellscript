#!/bin/bash

##################################################################
## 撤销修改 checkout reset clean revert
##################################################################
git lol
vim master.txt：做一些修改并保存
git diff：看到工作区和暂存区之间的差异
git status
git checkout -- master.txt：撤销对master.txt的本地修改
vim master.txt：已经恢复到刚开始了，再修改一下
git add master.txt
git status：显示有修改将要提交到历史记录中
git reset master.txt：撤销修改，还原暂存区	
git diff --cached：显示暂存区没有差别了，暂存去的修改已经被撤消了
git status：发现本地内容和暂存区里的内容有了差异
git lol：找到第一个commit on master的内容，通过commit的手动输入的信息找
git checkout INITAL_COMMIT -- master.txt：撤销对master.txt的本地修改
git status：工作区和暂存区没有区别
git diff -- cached：查看暂存区内容和历史内容的区别
git checkout HEAD -- master.txt：还原工作区和暂存区到最新的一个提交上
git reset INITIAL_COMMIT -- master.txt：只还原暂存区，不动工作区
git status：发现工作区和暂存区内容不同
git diff：查看上面发现的差异
git diff --cached：查看暂存区和当前历史记录区别
git reset master.txt：还原回来
清理编译等不需要的文件
touch test.o test.a：创建不需要提交的文件
ls
git clean -n：查看git可以帮自己清除的文件
git clean -f：强制让git帮自己清除,本地的文件也会清除
ls：已经没有了.o .a的文件了
##################################################################
## 恢复到某个commit
##################################################################
gilog # 查看当前的 commit 记录，记下来 hash
git checkout xxx path/to/file # xxx 表示上面的hash，路径是指你想要回复的误删除的文件或目录
# 或者
git show # 记录更长的 hash
git checkout xxx path/to/file
