#!/bin/bash
##################################################################
## 0. ssh.sh 的进阶; 端口不是默认的 22
# A 要控制 B
# A 主机: 外网, ip: 123.123.123.123, sshd 端口: 2221; ssh -D 就可以将 22 端口替换
# B 主机: 内网, sshd 端口: 2223
# 无论是外网主机 A, 还是内网主机 B, 都需要跑 ssh daemon

B$ ssh -fCNR 1234:localhost:2223 user1@123.123.123.123 -p 2221  # 首先在 B 上执行; -f 表示在 background 中运行
# 这句话的意思是将 A 主机的 1234 端口和 B 主机的 2223 端口绑定, 相当于远程端口映射 (Remote Port Forwarding)

A$ ss -ant / netstat -ant  # 查看 A 的 TCP 监听情况
# LISTEN     0      128               127.0.0.1:1234                     *:*

A$ ssh localhost -p 1234  # 像平时一样连接到 A 主机的 1234 端口就可以控制内网 B 主机了
# 这种反向连接不稳定, 可能随时断开, 需要内网主机 B 再次向外网 A 发起连接, 这时需要个朋友帮你在内网 B 主机执行这条命令, 它就是 Autossh
B$ ssh-copy-id user1@123.123.123.123  # 前提是做好公钥
##################################################################
## 1. autossh; 因为 ssh 经常断线, 所以要用 autossh 来连接
B$ autossh -M 5678 -fCNR 1234:localhost:2223 user1@123.123.123.123 -p 2221
# 比之前的命令添加的一个-M 5678 参数, 负责通过 5678 端口监视连接状态, 连接有问题时就会自动重连
# 去掉了一个 -f 参数, 因为 autossh 本身就会在 background 运行
##################################################################
## 总结:
# 1. autossh 使用方法就是: 将 ssh 替换为 autossh -M port

