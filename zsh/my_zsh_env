#!/bin/bash
##################################################################
## Proxy (/etc/environment 可以 System -> Network -> Proxy 生成, 也可以手动添加, 手动添加要去掉 export)
##################################################################
# 编辑 System Setting -> Network -> proxy 会自动保存到 /etc/environment
# pip, conda 会用到这里, 但还是写成一个命令比较好 myscript -> all_proxy
# export ALL_PROXY="https://192.168.1.13:8080/"  # 可以是小写
# export HTTP_PROXY="http://192.168.1.13:8080/"
# export HTTPS_PROXY="https://192.168.1.13:8080/"
# export FTP_PROXY="ftp://192.168.1.13:8080/"
# export SOCKS_PROXY="socks://192.168.1.13:8080/"
##################################################################
## /etc/bash.bashrc
##################################################################
export GREP_COLOR='01;37;46'   # color grep matches 蓝底白字加粗
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export PATH=/home/${USER}/github/jLife/bin:$PATH
export PATH=/home/${USER}/github/jShellscript/bin:$PATH
export PATH=/home/${USER}/github/jShellscript/bin/ctf:$PATH
export PATH=/home/${USER}/github/jShellscript/bin/game:$PATH

# 各种尝试了用 python 修改父进程的环境以后发现 alias 不能用, 只能在这里修改了, 每个目录下放一个脚本...
# 其实用 `` 来使用那些命令就可以切换目录了, 但还是不够方便
export PATH=/home/${USER}/github/jShellscript/bin/template:$PATH  # for python
source /home/${USER}/github/jShellscript/bin/alias /home/${USER}/github/jShellscript/bin/template/
export PATH=/home/${USER}/github/jShellscript/template:$PATH      # for shellscript
source /home/${USER}/github/jShellscript/bin/alias /home/${USER}/github/jShellscript/template/
export PATH=/home/${USER}/github/jTemplate/lisp/elisp:$PATH       # for elisp
source /home/${USER}/github/jShellscript/bin/alias /home/${USER}/github/jTemplate/lisp/elisp/
export PATH=/home/${USER}/github/jTemplate/latex:$PATH            # for latex
source /home/${USER}/github/jShellscript/bin/alias /home/${USER}/github/jTemplate/latex/
export PATH=/home/${USER}/github/jWeb/template:$PATH              # for html, css, js, jquery ...
source /home/${USER}/github/jShellscript/bin/alias /home/${USER}/github/jWeb/template/

export PATH=/home/${USER}/github/others/ctf-tools/bin:$PATH
export PATH=/usr/local/texlive/2016/bin/x86_64-linux:$PATH
export PYTHONPATH=$PYTHONPATH:/home/${USER}/github/jShellscript/bin/pythonpath
export PYTHONPATH=$PYTHONPATH:/home/${USER}/github/jShellscript/bin/template/src/jptsdn  # for SDN
export NODE_PATH=$HOME/github/jShellscript/bin/nodepath/:$NODE_PATH
# export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64:$JAVA_HOME  # 后面不能加原来的 $JAVA_HOME, 否则 pyspark 会报错...
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export JRE_HOME=${JAVA_HOME}/jre:$JRE_HOME
export HISTCONTROL=ignorespace  # 前面带空格的命令不记录到历史
# export LC_ALL="en_US.UTF-8"
# export LC_CTYPE="en_US.UTF-8"
export LC_CTYPE=zh_CN.UTF-8  # emacs GUI 输入中文要用这个, 终端里本来就可以输入中文, 放到 /etc/environment (Ubuntu 16.04 后才有的文件)
# export EDITOR=vim  # 加上这个以后好多 emacs 的快捷键用不了
##################################################################
## Spark
##################################################################
export SPARK_HOME=/srv/spark
export PATH=$SPARK_HOME/bin:$PATH  # 包括 pyspark 命令
export PYSPARK_DRIVER_PYTHON=ptpython
##################################################################
## django & virtualenv & virtualenvwrapper & conda & pyenv; 最终选择的是 anaconda
##################################################################
export WORKON_HOME=$HOME/.virtualenvs  # python-virtualenvwrapper 环境变量
export PROJECT_HOME=$HOME/workspace    # virtualenvwrapper 的工作路径, mkproject 使用
# 下面的 source 用 virtualenvwrapper 的时候取消注释, 用 miniconda3 的时候要注释掉, 而且 source 启动很慢
# source /usr/share/virtualenvwrapper/virtualenvwrapper.sh  # 这条命令之后才能使用 mkvirtualenv 等命令
export PATH=/home/${USER}/anaconda3/bin:$PATH  # for anaconda
export PATH=/home/${USER}/miniconda3/bin:$PATH   # for miniconda, 就是靠环境变量把我系统的 python 覆盖掉的
export PYENV_ROOT="$HOME/.pyenv"   # pyenv 用到的环境变量
export PATH=$PYENV_ROOT/bin:$PATH  # pyenv 可执行文件
# eval "$(pyenv init -)"             # enable shims and autocompletion, 安装 pyenv 后, 将这两句话取消注释
# eval "$(pyenv virtualenv-init -)"
##################################################################
## Latex, 这个好像不起作用, ~/texmf/tex/latex/local/ 默认放在这里
##################################################################
export TEXINPUTS=".:~/github/jShellscript/bin/latexpath:"  # 前边那个点可以不加, 最后 : 必须写; 存放 .cls, .sty 文件的地方; 这行其实不起作用 OnO
# ln -s ~/github/jShellscript/bin/latexpath/14thcoder_thesis.cls ~/texmf/tex/latex/local/14thcoder_thesis.cls
# 每次调试哪个文件就这样软连接一下, 调试好以后就删除软连接, 然后执行 ./config 把整个目录复制过去
# 后来又发现上面的配置起作用了..., 这样就不用 .config 文件了
##################################################################
## nvm, source 启动有点慢, 用的时候在打开; n(目前嫌弃 nvm 使我的 shell 启动速度太慢)
##################################################################
export NVM_DIR="$HOME/.nvm"  # install.sh will clone the nvm repository to ~/.nvm
# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # 这两句话相当于一句, source ~/.nvm/nvm.sh, 各有各的好处
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" --no-use  # 加上 --no-use, 每次使用的时候要 nvm use stable, 然后才能用 node npm
# [[ -r $NVM_DIR/bash_completion ]] && . $NVM_DIR/bash_completion  # -s 是否为空, -r 是否可读, 激活补全
# 现在使用的是 n, 因为 nvm 慢...
if [ ! -e $HOME/.node_n ]; then mkdir $HOME/.node_n; fi  # for n
export N_PREFIX=$HOME/.node_n  # for n
export PATH=$HOME/.node_n/bin:$PATH  # 这样才能覆盖掉系统的, 如果用默认的 N_PREFIX=/usr/local 就不用这个 PATH 了
export NODE_PATH=$HOME/.node_n/lib/node_modules:$NODE_PATH
##################################################################
## Go env
##################################################################
export GOPATH=$HOME/workspace
export PATH=$PATH:$GOPATH/bin
##################################################################
## UTF8
##################################################################
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
# 和 Docker 容器不兼容
# LANG="en_US.UTF-8"
# LC_COLLATE="en_US.UTF-8"
# LC_CTYPE="en_US.UTF-8"
# LC_MESSAGES="en_US.UTF-8"
# LC_MONETARY="en_US.UTF-8"
# LC_NUMERIC="en_US.UTF-8"
# LC_TIME="en_US.UTF-8"
# LC_ALL="en_US.UTF-8"
##################################################################
## Tmux 每次登陆进入到tmux, disable this function since I start to use Emacs
##################################################################
cmd=$(which tmux)  # tmux path
if [ -z $cmd ]; then  # 判断是否已有开启的tmux会话，没有则开启
    echo "You need to install tmux."
    # exit 1
else
    session=`whoami`  # session name
    $cmd has -t $session  # has-session 不存在会报错, 并且返回 1, 存在返回 0
    if [ $? != 0 ]; then
        $cmd new -d -n normal -s $session            # 最后的 "" 中的都是命令
        # $cmd splitw -v -p 20 -t $session "pry"  # 创建窗口 1，并分为上下两个窗格，其中上窗格占 80% 空间，运行 Vim，下窗格占 20% 空间，运行 Pry
        # $cmd neww -n mutt -t $session "mutt"    # 创建窗口 2，运行 Mutt
        # 下面这句话并没有用
        $cmd set -g automatic-rename-format '#(pwd="#{pane_current_path}"; echo ${pwd####*/})'
        $cmd att -t $session                      # 第二个终端就不会进入 tmux 了, 最后才能进入 tmux
    fi
fi
# 另一种判断 tmux 是否已经运行的方法
# if which tmux 2>&1 >/dev/null; then
#     # test -z "$TMUX" && (tmux attach || tmux_init)  # attach 上以后会自动 sync
#     test -z "$TMUX" && (clear || tmux_init)  # 当打开第二个终端时, 不执行任何操作, tmux_init() 函数中可以写初始化
# fi
##################################################################
## ~/.zshrc see something in jpc/terminal_config
##################################################################
eval `dircolors ~/.dircolors` # 执行的是调用这个脚本的地方的文件，即 ~/.dircolors
# dircolors 是系统自带命令，dircolors文件是自定义的，只要加上这句话，就可以改变ls的颜色，不需要其它软件支持
export TERM=xterm-256color
DEFAULT_USER=`whoami`
export EDITOR=/usr/bin/vim
##################################################################
## Change Title of Terminal (not work)
##################################################################
# function set-title(){
#   if [[ -z "$ORIG" ]]; then
#     ORIG=$PS1
#   fi
#   TITLE="\[\e]2;$*\a\]"
#   PS1=${ORIG}${TITLE}
# }
# set-title "路尽隐香处 翩然雪海间"
