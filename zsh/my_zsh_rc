#!/bin/bash

##################################################################
## 仿真模式
##################################################################
# emulate bash  # 等效于 emulate sh, 执行一次下面的
# sudo ln -sf /bin/zsh /bin/sh  # 用zsh来取代bash作为系统的/bin/sh
# Zsh是与Bash兼容的。这种说法既对, 也不对, 因为Zsh本身作为一种脚本语言, 是与Bash不兼容的。符合Bash规范的脚本无法保证被Zsh解释器正确执行。
# 但是, Zsh实现中包含了一个屌炸天的仿真模式（emulation mode）, 支持对两种主流的Bourne衍生版shell（bash、ksh）和C shell的仿真（csh的支持并不完整）。
# 在Bash的仿真模式下, 可以使用与Bash相同的语法和命令集合, 从而达到近乎完全兼容的目的。为了激活对Bash的仿真, 需要显式执行

##################################################################
## Emacs
##################################################################
# if [[ $TERM = dumb ]]; then
#   unset zle_bracketed_paste
# fi
# [[ $EMACS = t ]] && unsetopt zle
# if [ -n "$INSIDE_EMACS" ]; then
if [ -n "$INSIDE_EMACS" ]; then
    chpwd() { print -P "\033AnSiTc %d" }
    print -P "\033AnSiTu %n"
    print -P "\033AnSiTc %d"
fi
if [[ $EMACS = t ]]; then
    export ZSH_THEME="rawsyntax"
else
    export ZSH_THEME="robbyrussell"
fi
export TERM=xterm-256color

##################################################################
## Tmux 每次登陆进入到 tmux, disable this function since I start to use Emacs
##################################################################
cmd=$(which tmux)  # tmux path
if [ -z $cmd ]; then  # 判断是否已有开启的 tmux 会话, 没有则开启
    echo "You need to install tmux."
    # exit 1
else
    session=`whoami`  # session name
    $cmd has -t $session  # has-session 不存在会报错, 并且返回 1, 存在返回 0
    if [ $? != 0 ]; then
        $cmd new -d -n normal -s $session            # 最后的 "" 中的都是命令
        # $cmd splitw -v -p 20 -t $session "pry"  # 创建窗口 1, 并分为上下两个窗格, 其中上窗格占 80% 空间, 运行 Vim, 下窗格占 20% 空间, 运行 Pry
        # $cmd neww -n mutt -t $session "mutt"    # 创建窗口 2, 运行 Mutt
        # 下面这句话并没有用
        $cmd set -g automatic-rename-format '#(pwd="#{pane_current_path}"; echo ${pwd####*/})'
        $cmd att -t $session                      # 第二个终端就不会进入 tmux 了, 最后才能进入 tmux
    fi
fi
# 另一种判断 tmux 是否已经运行的方法
# if which tmux 2>&1 >/dev/null; then
#     # test -z "$TMUX" && (tmux attach || tmux_init)  # attach 上以后会自动 sync
#     test -z "$TMUX" && (clear || tmux_init)  # 当打开第二个终端时, 不执行任何操作, tmux_init() 函数中可以写初始化
# fi

# precmd () {
#     if [ -n "$TMUX" ]; then
#         if [ -n "$VIM" ]; then
#             echo 'helo'
#         else
#             tmux set-window-option -q window-status-format "#[bg=cyan, fg=#ffffff] [#I] ${PWD##/*/}"
#             tmux set-window-option -q window-status-current-format "#[fg=#ffffff, bg=black, bold] *[#I] ${PWD##/*/}*"
#         fi
#     fi
# }

##################################################################
## 当上一条命令忘记加 sudo 时, 按两次 ESC 就行了
##################################################################
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
    zle end-of-line
}
cmd=$(which bindkey)
# 下面的 if else 为了兼容 Docker
if [ -z $cmd ]; then
    echo 'You are not in zsh'
else
    zle -N sudo-command-line
    bindkey "\e\e" sudo-command-line  # ESC
    # bindkey "^E" sudo-command-line  # 先随便写一个, 然后再替换的时候快捷键, 这里的^T不是两个字符
fi

##################################################################
## ~/.zshrc see something in jpc/terminal_config
##################################################################
if [ "$(uname)" = "Darwin" ]; then
    eval `gdircolors -b $HOME/.dircolors`
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
    eval `dircolors ~/.dircolors` # 执行的是调用这个脚本的地方的文件, 即 ~/.dircolors
    # dircolors 是 GNU 系统自带命令(MAC 不能使用), dircolors 文件是自定义的, 只要加上这句话, 就可以改变 ls 的颜色, 不需要其它软件支持
fi

##################################################################
## Change Title of Terminal (not work)
##################################################################
# function set-title(){
#   if [[ -z "$ORIG" ]]; then
#     ORIG=$PS1
#   fi
#   TITLE="\[\e]2;$*\a\]"
#   PS1=${ORIG}${TITLE}
# }
# set-title "路尽隐香处 翩然雪海间"

##################################################################
## 快捷键, 这好坑...
##################################################################
# man zshzle  # 查看相关操作
# bindkey  # 终端命令, 看当前的绑定
# bindkey -l  # will give you a list of existing keymap names.
# export EDITOR="vim"
# if [ -z $cmd ]; then
#     echo 'You are not in zsh'
# else
#     bindkey -v
#     # vi style incremental search
#     bindkey '^R' history-incremental-search-backward
#     bindkey '^S' history-incremental-search-forward
#     bindkey '^P' history-search-backward
#     bindkey '^N' history-search-forward
# fi

##################################################################
## 下面的属于历史遗留问题
##################################################################

##################################################################
## 配置 autojump, 要先装上 sudo apt-get install autojump 介绍在 config 中
##################################################################
[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && . ~/.autojump/etc/profile.d/autojump.sh

##################################################################
## color
##################################################################
#color{{{
# autoload colors
# colors
#
# for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
# eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}'
# eval $color='%{$fg[${(L)color}]%}'
# (( count = $count + 1 ))
# done
# FINISH="%{$terminfo[sgr0]%}"
#}}}

##################################################################
## 语法高亮
##################################################################
# setopt extended_glob
# TOKENS_FOLLOWED_BY_COMMANDS=('|' '||' ';' '&' '&&' 'sudo' 'do' 'time' 'strace' 'man')
#
# recolor-cmd() {
#     region_highlight=()
#     colorize=true
#     start_pos=0
#     for arg in ${(z)BUFFER}; do
#         ((start_pos+=${#BUFFER[$start_pos+1,-1]}\
#             -${#${BUFFER[$start_pos+1,-1]## #}}))
#         ((end_pos=$start_pos+${#arg}))
#         if $colorize; then
#             colorize=false
#             res=$(LC_ALL=C builtin type $arg 2>/dev/null)
#             case $res in
#                 *'reserved word'*)   style="fg=magenta,bold";;
#                 *'alias for'*)       style="fg=cyan,bold";;
#                 *'shell builtin'*)   style="fg=yellow,bold";;
#                 *'shell function'*)  style='fg=green,bold';;
#                 *"$arg is"*)
#                     [[ $arg = 'sudo' ]] && style="fg=red,bold"\
#                                   || style="fg=blue,bold";;
#                 *)                   style='none,bold';;
#             esac
#             region_highlight+=("$start_pos $end_pos $style")
#         fi
#         [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\|}]}:+yes} = 'yes' ]]\
#             && colorize=true
#         start_pos=$end_pos
#     done
# }
#
# check-cmd-self-insert() { zle .self-insert && recolor-cmd }
# check-cmd-backward-delete-char() { zle .backward-delete-char && recolor-cmd }
#
# zle -N self-insert check-cmd-self-insert
# zle -N backward-delete-char check-cmd-backward-delete-char
#
